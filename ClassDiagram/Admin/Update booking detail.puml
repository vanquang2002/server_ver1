@startuml
actor Admin
participant "UI/Interface" as UI
participant "BookingRouter" as Router
participant "BookingController" as Controller
participant "BookingRepository" as Repository
participant "BookingModel" as BookingModel
participant "Database" as DB

Admin -> UI: Request to update booking details
activate UI
UI -> Router: GET /admin/bookings/update/{bookingId}
activate Router
Router -> Controller: showUpdateBookingForm(bookingId)
activate Controller
Controller -> Repository: getBookingDetails(bookingId)
activate Repository

Repository -> BookingModel: fetchBookingById(bookingId)
activate BookingModel
BookingModel -> DB: query booking by ID
activate DB
DB --> BookingModel: booking data
deactivate DB
BookingModel --> Repository: booking data
deactivate BookingModel
Repository --> Controller: booking data
deactivate Repository

Controller --> UI: Display update booking form
deactivate Controller
deactivate Router
deactivate UI

Admin -> UI: Edit booking details and confirm update
activate UI
UI -> Router: POST /admin/bookings/update/{bookingId}
activate Router
Router -> Controller: updateBookingDetails(bookingId, updatedDetails)
activate Controller
Controller -> Repository: updateBookingDetails(bookingId, updatedDetails)
activate Repository

Repository -> BookingModel: updateBooking(bookingId, updatedDetails)
activate BookingModel
BookingModel -> DB: update booking details in database
activate DB
DB --> BookingModel: booking details updated
deactivate DB
BookingModel --> Repository: booking details updated
deactivate BookingModel
Repository --> Controller: booking details updated successfully
deactivate Repository

Controller --> Router: 200 OK (booking details updated)
deactivate Controller
Router --> UI: 200 OK (booking details updated)
deactivate Router
UI --> Admin: Display success message (booking details updated)
deactivate UI
@enduml
