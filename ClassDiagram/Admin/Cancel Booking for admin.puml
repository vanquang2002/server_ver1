@startuml
actor Admin
participant "UI/Interface" as UI
participant "BookingRouter" as Router
participant "BookingController" as Controller
participant "BookingRepository" as Repository
participant "BookingModel" as BookingModel
participant "Database" as DB

Admin -> UI: Request to cancel a booking
activate UI
UI -> Router: GET /admin/bookings/cancel/{bookingId}
activate Router
Router -> Controller: showCancelBookingForm(bookingId)
activate Controller
Controller -> Repository: getBookingDetails(bookingId)
activate Repository

Repository -> BookingModel: fetchBookingById(bookingId)
activate BookingModel
BookingModel -> DB: query booking by ID
activate DB
DB --> BookingModel: booking data
deactivate DB
BookingModel --> Repository: booking data
deactivate BookingModel
Repository --> Controller: booking data
deactivate Repository

Controller --> UI: Display cancel booking form
deactivate Controller
deactivate Router
deactivate UI

Admin -> UI: Confirm cancel booking
activate UI
UI -> Router: POST /admin/bookings/cancel/{bookingId}
activate Router
Router -> Controller: cancelBooking(bookingId)
activate Controller
Controller -> Repository: cancelBooking(bookingId)
activate Repository

Repository -> BookingModel: cancelBooking(bookingId)
activate BookingModel
BookingModel -> DB: update booking status to 'Cancelled'
activate DB
DB --> BookingModel: booking cancelled
deactivate DB
BookingModel --> Repository: booking cancelled
deactivate BookingModel
Repository --> Controller: booking cancelled successfully
deactivate Repository

Controller --> Router: 200 OK (booking cancelled)
deactivate Controller
Router --> UI: 200 OK (booking cancelled)
deactivate Router
UI --> Admin: Display success message (booking cancelled)
deactivate UI
@enduml
