@startuml
actor Admin
participant "UI/Interface" as UI
participant "OtherServiceRouter" as Router
participant "OtherServiceController" as Controller
participant "OtherServiceRepository" as Repository
participant "OtherServiceModel" as OtherServiceModel
participant "Database" as DB

Admin -> UI: Request to update an existing other service
activate UI
UI -> Router: GET /admin/other-services/update/{serviceId}
activate Router
Router -> Controller: showUpdateOtherServiceForm(serviceId)
activate Controller
Controller -> Repository: getServiceDetails(serviceId)
activate Repository

Repository -> OtherServiceModel: fetchServiceById(serviceId)
activate OtherServiceModel
OtherServiceModel -> DB: query service by ID
activate DB
DB --> OtherServiceModel: service data
deactivate DB
OtherServiceModel --> Repository: service data
deactivate OtherServiceModel
Repository --> Controller: service data
deactivate Repository

Controller --> UI: Display service details form for update
deactivate Controller
deactivate Router
deactivate UI

Admin -> UI: Submit updated service data
activate UI
UI -> Router: POST /admin/other-services/update/{serviceId} (updated service details)
activate Router
Router -> Controller: updateOtherService(serviceId, updatedServiceData)
activate Controller
Controller -> Repository: saveUpdatedService(serviceId, updatedServiceData)
activate Repository

Repository -> OtherServiceModel: updateService(serviceId, updatedServiceData)
activate OtherServiceModel
OtherServiceModel -> DB: update service in database
activate DB
DB --> OtherServiceModel: service updated
deactivate DB
OtherServiceModel --> Repository: service updated
deactivate OtherServiceModel
Repository --> Controller: service updated successfully
deactivate Repository

Controller --> Router: 200 OK (service updated)
deactivate Controller
Router --> UI: 200 OK (service updated)
deactivate Router
UI --> Admin: Display success message (service updated)
deactivate UI
@enduml
