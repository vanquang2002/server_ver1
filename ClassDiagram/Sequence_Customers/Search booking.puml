@startuml
actor Customer
participant "UI/Interface" as UI
participant "BookingRouter" as Router
participant "BookingController" as Controller
participant "BookingRepository" as Repository
participant "BookingModel" as BookingModel
participant "Database" as DB

Customer -> UI: Request to search booking
activate UI
UI -> Router: GET /bookings/{bookingId}
activate Router
Router -> Controller: searchBooking(bookingId)
activate Controller
Controller -> Repository: getBookingDetails(bookingId)
activate Repository

Repository -> BookingModel: fetchBookingById(bookingId)
activate BookingModel
BookingModel -> DB: query booking by ID
activate DB
DB --> BookingModel: booking data
deactivate DB
BookingModel --> Repository: booking data
deactivate BookingModel
Repository --> Controller: booking data
deactivate Repository

Controller -> Controller: validate booking existence
alt If booking exists
    Controller --> Router: 200 OK (Booking found)
    deactivate Controller
    Router --> UI: 200 OK (Booking found)
    deactivate Router
    UI --> Customer: Display booking details
    deactivate UI
else If booking does not exist
    Controller --> UI: 404 Not Found (Booking not found)
    deactivate Controller
    Router --> UI: 404 Not Found (Booking not found)
    deactivate Router
    UI --> Customer: Display error message (Booking not found)
    deactivate UI
end
@enduml
