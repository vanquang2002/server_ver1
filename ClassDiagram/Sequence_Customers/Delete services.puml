@startuml
actor Customer
participant "UI/Interface" as UI
participant "BookingRouter" as Router
participant "BookingController" as Controller
participant "BookingRepository" as Repository
participant "BookingModel" as BookingModel
participant "Database" as DB

Customer -> UI: Request to delete service from booking
activate UI
UI -> Router: DELETE /bookings/{bookingId}/services/{serviceId}
activate Router
Router -> Controller: deleteServiceFromBooking(bookingId, serviceId)
activate Controller
Controller -> Repository: deleteServiceFromBooking(bookingId, serviceId)
activate Repository

Repository -> BookingModel: fetchBookingById(bookingId)
activate BookingModel
BookingModel -> DB: query booking by ID
activate DB
DB --> BookingModel: booking data
deactivate DB
BookingModel --> Repository: booking data
deactivate BookingModel
Repository --> Controller: booking data
deactivate Repository

Controller -> Controller: validate service in booking
alt If service exists in booking
    Controller -> Repository: removeServiceFromBooking(serviceId)
    activate Repository
    Repository -> BookingModel: remove service from booking
    activate BookingModel
    BookingModel -> DB: update booking without the service
    activate DB
    DB --> BookingModel: updated booking
    deactivate DB
    BookingModel --> Repository: update success
    deactivate BookingModel
    Repository --> Controller: update success
    deactivate Repository
    Controller --> Router: 200 OK (service deleted)
    deactivate Controller
    Router --> UI: 200 OK (service deleted)
    deactivate Router
    UI --> Customer: Display success message (service deleted)
    deactivate UI
else If service not found in booking
    Controller --> UI: 400 Bad Request (service not found)
    deactivate Controller
    Router --> UI: 400 Bad Request (service not found)
    deactivate Router
    UI --> Customer: Display error message (service not found)
    deactivate UI
end
@enduml
