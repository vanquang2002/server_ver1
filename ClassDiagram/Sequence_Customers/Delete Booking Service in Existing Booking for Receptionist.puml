@startuml
actor Receptionist
participant "UI/Interface" as UI
participant "BookingRouter" as Router
participant "BookingController" as Controller
participant "BookingRepository" as Repository
participant "BookingModel" as BookingModel
participant "Database" as DB

Receptionist -> UI: Request to delete service from booking
activate UI
UI -> Router: GET /bookings/{bookingId}/delete-service
activate Router
Router -> Controller: deleteServiceFromBooking(bookingId, serviceId)
activate Controller
Controller -> Repository: getBookingDetails(bookingId)
activate Repository

Repository -> BookingModel: fetchBookingById(bookingId)
activate BookingModel
BookingModel -> DB: query booking by ID
activate DB
DB --> BookingModel: booking data
deactivate DB
BookingModel --> Repository: booking data
deactivate BookingModel
Repository --> Controller: booking data
deactivate Repository

Controller -> Controller: validate service in booking
alt If service exists in booking
    Controller -> Repository: removeServiceFromBooking(bookingId, serviceId)
    activate Repository
    Repository -> BookingModel: delete service from booking
    activate BookingModel
    BookingModel -> DB: remove service from booking
    activate DB
    DB --> BookingModel: service removed
    deactivate DB
    BookingModel --> Repository: service removed
    deactivate BookingModel
    Repository --> Controller: service removed successfully
    deactivate Repository
    Controller --> Router: 200 OK (Service removed successfully)
    deactivate Controller
    Router --> UI: 200 OK (Service removed successfully)
    deactivate Router
    UI --> Receptionist: Display success message (Service removed)
    deactivate UI
else If service not found in booking
    Controller --> UI: 400 Bad Request (Service not found in booking)
    deactivate Controller
    Router --> UI: 400 Bad Request (Service not found)
    deactivate Router
    UI --> Receptionist: Display error message (Service not found)
    deactivate UI
end
@enduml
