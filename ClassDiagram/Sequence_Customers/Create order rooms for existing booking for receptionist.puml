@startuml
actor Receptionist
participant "UI/Interface" as UI
participant "BookingRouter" as Router
participant "BookingController" as Controller
participant "BookingRepository" as Repository
participant "BookingModel" as BookingModel
participant "OrderRoomRepository" as OrderRoomRepository
participant "OrderRoomModel" as OrderRoomModel
participant "Database" as DB

Receptionist -> UI: Request to create order room for booking
activate UI
UI -> Router: GET /bookings/{bookingId}/order-rooms
activate Router
Router -> Controller: createOrderRoomForBooking(bookingId, roomDetails)
activate Controller
Controller -> Repository: getBookingDetails(bookingId)
activate Repository

Repository -> BookingModel: fetchBookingById(bookingId)
activate BookingModel
BookingModel -> DB: query booking by ID
activate DB
DB --> BookingModel: booking data
deactivate DB
BookingModel --> Repository: booking data
deactivate BookingModel
Repository --> Controller: booking data
deactivate Repository

Controller -> OrderRoomRepository: createOrderForBooking(bookingId, roomDetails)
activate OrderRoomRepository
OrderRoomRepository -> OrderRoomModel: createOrder(roomDetails)
activate OrderRoomModel
OrderRoomModel -> DB: insert room order data
activate DB
DB --> OrderRoomModel: room order created
deactivate DB
OrderRoomModel --> OrderRoomRepository: room order created
deactivate OrderRoomModel
OrderRoomRepository --> Controller: order created successfully
deactivate OrderRoomRepository

Controller --> Router: 200 OK (Order room created successfully)
deactivate Controller
Router --> UI: 200 OK (Order room created successfully)
deactivate Router
UI --> Receptionist: Display success message (Order room created)
deactivate UI
@enduml
