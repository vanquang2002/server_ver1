@startuml
actor Receptionist
participant "UI/Interface" as UI
participant "BookingRouter" as Router
participant "BookingController" as Controller
participant "BookingRepository" as Repository
participant "BookingModel" as BookingModel
participant "RoomModel" as RoomModel
participant "Database" as DB

Receptionist -> UI: Request to check-out booking
activate UI
UI -> Router: GET /booking/{bookingId}/check-out
activate Router
Router -> Controller: checkOutBooking(bookingId)
activate Controller
Controller -> Repository: checkOutBooking(bookingId)
activate Repository

Repository -> BookingModel: fetchBookingById(bookingId)
activate BookingModel
BookingModel -> DB: query booking by ID
activate DB
DB --> BookingModel: booking data
deactivate DB
BookingModel --> Repository: booking data
deactivate BookingModel
Repository --> Controller: booking data
deactivate Repository

Controller -> RoomModel: updateRoomStatusAfterCheckOut(bookingId)
activate RoomModel
RoomModel -> DB: update room status to "available"
activate DB
DB --> RoomModel: room status updated
deactivate DB
RoomModel --> Controller: room status updated
deactivate RoomModel

Controller -> Repository: updateBookingStatus(bookingId, "checked-out")
activate Repository
Repository -> BookingModel: update booking status
activate BookingModel
BookingModel -> DB: update booking status to "checked-out"
activate DB
DB --> BookingModel: booking status updated
deactivate DB
BookingModel --> Repository: booking status updated
deactivate BookingModel
Repository --> Controller: booking status updated
deactivate Repository

Controller --> Router: 200 OK (booking checked-out)
deactivate Controller
Router --> UI: 200 OK (booking checked-out)
deactivate Router
UI --> Receptionist: Display success message (check-out complete)
deactivate UI
@enduml
